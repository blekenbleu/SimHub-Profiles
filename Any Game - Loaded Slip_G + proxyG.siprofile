{
  "IncludeOutputSettingsInProfile": false,
  "UnmuteEffectsAfterSimhubRestart": false,
  "EffectsContainers": [
    {
      "EffectsContainers": [
        {
          "SupportWarnInfo": null,
          "BrakeFilter": 10,
          "Filter": {
            "GammaValue": 0.99999999999999889,
            "InputGain": 53.0,
            "MinimumForce": 0,
            "Threshold": 10,
            "FilterType": "GammaFilter"
          },
          "MuteWhenLockEffectIsActive": false,
          "ThrottleFilter": 10,
          "UseBrakeFilter": false,
          "UseThrottleFilter": false,
          "IsMuted": false,
          "ContainerId": "da2245c2-3fe8-4b0d-a3b0-4cdce22c2f2b",
          "ContainerType": "WheelsSlipContainer",
          "Description": "ProxyS: wheel slip for tire squeal forced freq",
          "AggregationMode": "Corners",
          "Gain": 0.0,
          "IsEnabled": true,
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 1,
            "UseHighFrequency": false,
            "HighFrequency": 55,
            "WhiteNoise": 4,
            "UseWhiteNoise": false,
            "EnableDurationModulation": false,
            "DurationModulationValue": 34,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "DelayEnabled": false,
            "IsAudio": true,
            "AssignToChannelGroup": false,
            "ChannelGroupName": "",
            "PropertyName": "proxyS",
            "ExportProperty": true,
            "DisableOutput": true,
            "OutputType": "ToneOutput"
          }
        },
        {
          "AutocalibrationMax": 95.0,
          "Filter": {
            "GammaValue": 0.49999999999999961,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "s = $prop('ShakeITBSV3Plugin.Export.proxyS.FrontLeft');\r\nreturn SG(s, $prop('GlobalAccelerationG'))\r\n//return noise(0)\r\nreturn noise(SG(s, $prop('GlobalAccelerationG')));",
            "PreExpression": "const n = 3;\t\t// fraction of range for random()\r\nconst f = n / (1 + n);\r\nfunction SG(s, g) { return 100 - Math.min(100, Math.abs(.5*s/Math.max(.1,Math.abs(g)))) };\r\nfunction noise(sg) { return f * (sg + Math.random() * (1 + sg / n)) };\r\nvar s;\r\n"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "s = $prop('ShakeITBSV3Plugin.Export.proxyS.FrontRight');\r\n//return SG(s, $prop('GlobalAccelerationG'))\r\nreturn noise(SG(s, $prop('GlobalAccelerationG')));",
            "PreExpression": "const n = 3;\t\t// fraction of range for random()\r\nconst f = n / (1 + n);\r\nfunction SG(s, g) { return 100 - Math.abs(.5*s/Math.max(.1,Math.abs(g))) };\r\nfunction noise(sg) { return f * (sg + Math.random() * (1 + sg / n)) };\r\nvar s;"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "s = $prop('ShakeITBSV3Plugin.Export.proxyS.RearLeft');\r\nreturn noise(SG(s, $prop('GlobalAccelerationG')));",
            "PreExpression": "const n = 3;\t\t// fraction of range for random()\r\nconst f = n / (1 + n);\r\nfunction SG(s, g) { return 100 - Math.min(100, Math.abs(.5*s/Math.max(.1,Math.abs(g)))) };\r\nfunction noise(sg) { return f * (sg + Math.random() * (1 + sg / n)) };\r\nvar s;"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "s = $prop('ShakeITBSV3Plugin.Export.proxyS.RearRight');\r\nreturn noise(SG(s, $prop('GlobalAccelerationG')));",
            "PreExpression": "const n = 3;\t\t// fraction of range for random()\r\nconst f = n / (1 + n);\r\nfunction SG(s, g) { return 100 - Math.min(100, Math.abs(.5*s/Math.max(.1,Math.abs(g)))) };\r\nfunction noise(sg) { return f * (sg + Math.random() * (1 + sg / n)) };\r\nvar s;"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "SupportWarnInfo": null,
          "IsMuted": false,
          "ContainerId": "bf2d5c62-174a-4276-aa8c-d38e19902568",
          "ContainerType": "CustomEffectContainer",
          "Description": "noisy: frequencies",
          "AggregationMode": "Corners",
          "Gain": 0.0,
          "IsEnabled": true,
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 1,
            "UseHighFrequency": false,
            "HighFrequency": 50,
            "WhiteNoise": 10,
            "UseWhiteNoise": false,
            "EnableDurationModulation": true,
            "DurationModulationValue": 34,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "DelayEnabled": false,
            "IsAudio": true,
            "AssignToChannelGroup": false,
            "ChannelGroupName": "",
            "PropertyName": "noisy",
            "ExportProperty": true,
            "DisableOutput": true,
            "OutputType": "ToneOutput"
          }
        },
        {
          "AutocalibrationMax": 95.0,
          "Filter": {
            "GammaValue": 0.99999999999999933,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "// front left load\r\n// left load (turning right)\r\nd = (0 > (s = $prop('AccelerationSway'))) ? 4 : -4;\r\nL = 25 + AbsAcc(s) / d  // 0-50% left-right distribution\r\nd = (0 < (s = $prop('AccelerationSurge'))) ? 100 : -100\r\n// if both accel are 0, then no load shift and each corner gets 25%\r\nL *= (1 + AbsAcc(s) / d); // 0-100% fore-aft distribution\r\ns = $prop('ShakeITBSV3Plugin.Export.proxyS.FrontLeft');\r\nreturn L * gate(s, $prop('GlobalAccelerationG'));",
            "PreExpression": "function AbsAcc(a) { return 100 * Math.abs(.05 * a)**0.3 }\r\nfunction SG(s, g) { return Math.abs(.5 * s / Math.max(.1, Math.abs(g))) - 5 };\r\nfunction gate(s, g) { return 0.01 * Math.min(100, 35 * SG(s,g)) }\r\nvar s,d,L;"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "// front right load\r\n// right load (turning right)\r\nd = (0 < (s = $prop('AccelerationSway'))) ? 4 : -4;\r\nL = 25 + AbsAcc(s) / d  // 0-50% left-right distribution\r\nd = (0 < (s = $prop('AccelerationSurge'))) ? 100 : -100\r\n// if both accel are 0, then no load shift and each corner gets 25%\r\nL *= (1 + AbsAcc(s) / d); // 0-100% fore-aft distribution\r\ns = $prop('ShakeITBSV3Plugin.Export.proxyS.FrontRight');\r\nreturn L * gate(s, $prop('GlobalAccelerationG'));",
            "PreExpression": "function AbsAcc(a) { return 100 * Math.abs(.05 * a)**0.3 }\r\nfunction SG(s, g) { return Math.abs(.5 * s / Math.max(.1, Math.abs(g))) - 5 };\r\nfunction gate(s, g) { return 0.01 * Math.min(100, 35 * SG(s,g)) }\r\nvar s,d,L;"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "// rear left load\r\n// left load (turning right)\r\nd = (0 > (s = $prop('AccelerationSway'))) ? 4 : -4;\r\nL = 25 + AbsAcc(s) / d  // 0-50% left-right distribution\r\n// acceleration force\r\nd = (0 > (s = $prop('AccelerationSurge'))) ? 100 : -100\r\n// if both accel are 0, then no load shift and each corner gets 25%\r\nL *= (1 + AbsAcc(s) / d); // 0-100% fore-aft distribution\r\ns = $prop('ShakeITBSV3Plugin.Export.proxyS.RearLeft');\r\nreturn L * gate(s, $prop('GlobalAccelerationG'));\r\n",
            "PreExpression": "function AbsAcc(a) { return 100 * Math.abs(.05 * a)**0.3 }\r\nfunction SG(s, g) { return Math.abs(.5 * s / Math.max(.1, Math.abs(g))) - 5 };\r\nfunction gate(s, g) { return 0.01 * Math.min(100, 35 * SG(s,g)) }\r\nvar s,d,L;"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "// rear right load\r\n// right load (turning right)\r\nd = (0 < (s = $prop('AccelerationSway'))) ? 4 : -4;\r\nL = 25 + AbsAcc(s) / d  // 0-50% left-right distribution\r\n// acceleration\r\nd = (0 > (s = $prop('AccelerationSurge'))) ? 100 : -100\r\n// if both accel are 0, then no load shift and each corner gets 25%\r\nL *= (1 + AbsAcc(s) / d); // 0-100% fore-aft distribution\r\ns = $prop('ShakeITBSV3Plugin.Export.proxyS.RearRight');\r\nreturn L * gate(s, $prop('GlobalAccelerationG'));",
            "PreExpression": "function AbsAcc(a) { return 100 * Math.abs(.05 * a)**0.3 }\r\nfunction SG(s, g) { return Math.abs(.5 * s / Math.max(.1, Math.abs(g))) - 5 };\r\nfunction gate(s, g) { return 0.01 * Math.min(100, 35 * SG(s,g)) }\r\nvar s,d,L;"
          },
          "ForceFrequencies": true,
          "FrontLeftFrequencyFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "return low + f * $prop('ShakeITBSV3Plugin.Export.noisy.FrontLeft')",
            "PreExpression": "const low = 25;\r\nconst high = 1000;\r\nconst f = .01 * (high - low);"
          },
          "FrontRightFrequencyFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "return low + f * $prop('ShakeITBSV3Plugin.Export.noisy.FrontRight')",
            "PreExpression": "const low = 25;\r\nconst high = 1000;\r\nconst f = .01 * (high - low);"
          },
          "RearLeftFrequencyFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "return low + f * $prop('ShakeITBSV3Plugin.Export.noisy.RearLeft')",
            "PreExpression": "const low = 25;\r\nconst high = 1000;\r\nconst f = .01 * (high - low);"
          },
          "RearRightFrequencyFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "return low + f * $prop('ShakeITBSV3Plugin.Export.noisy.RearRight')",
            "PreExpression": "const low = 25;\r\nconst high = 1000;\r\nconst f = .01 * (high - low);"
          },
          "SupportWarnInfo": null,
          "IsMuted": false,
          "ContainerId": "b6a37174-466c-4181-877c-81f5a83e39e9",
          "ContainerType": "CustomEffectContainer",
          "Description": "output: loaded gated wheel slips",
          "AggregationMode": "Corners",
          "Gain": 100.0,
          "IsEnabled": true,
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 1,
            "UseHighFrequency": false,
            "HighFrequency": 30,
            "WhiteNoise": 10,
            "UseWhiteNoise": false,
            "EnableDurationModulation": true,
            "DurationModulationValue": 34,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "DelayEnabled": false,
            "IsAudio": true,
            "AssignToChannelGroup": false,
            "ChannelGroupName": "",
            "PropertyName": "LoadedSlip",
            "ExportProperty": false,
            "DisableOutput": false,
            "OutputType": "ToneOutput"
          }
        }
      ],
      "Filter": null,
      "SupportWarnInfo": null,
      "IsMuted": false,
      "ContainerId": "583ba06f-d9a8-447a-8c0d-75a730ea80fe",
      "ContainerType": "GroupContainer",
      "Description": "Loaded Slip",
      "AggregationMode": null,
      "Gain": 100.0,
      "IsEnabled": true,
      "Output": null
    },
    {
      "AutocalibrationMax": 95.0,
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 100.0,
        "MinimumForce": 0,
        "Threshold": 0,
        "FilterType": "GammaFilter"
      },
      "FrontLeftFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "return Math.abs($prop('GlobalAccelerationG'))*gain;",
        "PreExpression": "const gain = 5;"
      },
      "FrontRightFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "//return 50 + gain * $prop('AccelerationHeave');\r\nreturn integrate($prop('AccelerationHeave') + gain * $prop('OrientationPitch'));",
        "PreExpression": "const gain = .2;\r\nroot['alt'] = 1000;\r\n\r\nfunction integrate(h) {\r\nroot['alt']+= 2*h;\r\nif (0 > root['alt'])\r\n  root['alt'] = 0;\r\nelse if (10000 < root['alt'])\r\n  root['alt'] = 10000;\r\n  return .01*root['alt'];\r\n}"
      },
      "RearLeftFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "return 50+ gain * $prop('OrientationPitch')",
        "PreExpression": "const gain = 5;"
      },
      "RearRightFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "h = 0.05*Math.max(0,-$prop('AccelerationHeave'));\r\n//return 50 + 20*($prop('GlobalAccelerationG') - h);\r\nh = Math.max(0, $prop('GlobalAccelerationG')*$prop('GlobalAccelerationG') - h);\r\n//return h;\r\nreturn 5*Math.pow(h,.5)",
        "PreExpression": "var h;"
      },
      "ForceFrequencies": false,
      "FrontLeftFrequencyFormula": {
        "Expression": ""
      },
      "FrontRightFrequencyFormula": {
        "Expression": ""
      },
      "RearLeftFrequencyFormula": {
        "Expression": ""
      },
      "RearRightFrequencyFormula": {
        "Expression": ""
      },
      "SupportWarnInfo": null,
      "IsMuted": false,
      "ContainerId": "932f2a19-8de6-421f-a242-e7aae6d02424",
      "ContainerType": "CustomEffectContainer",
      "Description": "proxyG experiments",
      "AggregationMode": "Corners",
      "Gain": 0.0,
      "IsEnabled": true,
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 1,
        "UseHighFrequency": false,
        "HighFrequency": 50,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "EnableDurationModulation": true,
        "DurationModulationValue": 34,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "DelayEnabled": false,
        "IsAudio": true,
        "AssignToChannelGroup": false,
        "ChannelGroupName": "",
        "PropertyName": "proxyG",
        "ExportProperty": true,
        "DisableOutput": true,
        "OutputType": "ToneOutput"
      }
    }
  ],
  "AutoCalibrationRatio2": 100,
  "OutputMode": 1,
  "GlobalGain": 50.0,
  "UseProfileGain": true,
  "LastLoaded": "2024-02-12T17:01:51.7323547-05:00",
  "Description": "2024-01-20\r\nhttps://www.racedepartment.com/threads/simhub-shakeit-bass-shakers-custom-4-corner-tire-slip.198455/post-3406020\r\nhttps://www.racedepartment.com/attachments/newloaded4-chanwheelslipundersteer-siprofile-txt.485970/\r\nhttps://www.racedepartment.com/threads/simhub-shakeit-bass-shakers-custom-4-corner-tire-slip.198455/post-3740571",
  "Name": "Loaded Slip/G + proxyG",
  "ProfileId": "25d41711-f5d2-470e-a105-7e93543c5e16",
  "GameCode": null
}